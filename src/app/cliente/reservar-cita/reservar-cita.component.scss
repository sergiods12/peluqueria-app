// src/app/cliente/reservar-cita/reservar-cita.component.scss
.tramo-card {
  border: 1px solid #e0e0e0;
  border-radius: 0.375rem;
  transition: transform 0.15s ease-in-out, box-shadow 0.15s ease-in-out, background-color 0.2s ease-in-out;
  min-height: 60px;
  font-size: 0.8rem;

  .card-body {
    padding: 0.4rem;
  }

  .tramo-time {
    font-weight: 500;
    font-size: 0.85rem;
    margin-bottom: 0.15rem !important;
  }

  .tramo-status {
    font-size: 0.65rem;
    display: block;
    margin-top: 2px;
  }

  // Default for non-interactive slots or slots that cannot start a service
  &.tramo-unavailable,
  &.tramo-available-not-clickable {
    background-color: #f0f0f0; // Light grey
    color: #888;
    cursor: not-allowed;
    border-color: #ddd;
  }

  // Clickable & Available (but not selected) - User requirement: Grey
  &.tramo-available-clickable {
    background-color: #ffffff;
    color: #333;
    border: 1px solid #ccc;
    cursor: pointer;

    &:hover {
      background-color: #e9f5ff;
      border-color: #b3d7ff;
      transform: translateY(-1px);
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.06);
    }
  }

  // Red (Reserved by others)
  &.tramo-reserved {
    background-color: #dc3545; // Bootstrap's danger
    color: white;
    border-color: #c82333;
    cursor: not-allowed;
    .tramo-status, .tramo-time { // Ensure text readability
        color: white !important;
    }
  }

  // Estilos para tramos seleccionados (naranja) o reservados por el cliente (verde)
  // El color de fondo específico (naranja o verde) vendrá de la función getColor()
  // Esta clase puede usarse para estilos comunes como borde, fuente, transformaciones.
  &.tramo-selected {
    font-weight: bold;
    transform: scale(1.03);
    // El color de fondo y texto se manejan por getColor, pero podemos definir un box-shadow genérico
    // o específico si el color de fondo es naranja o verde.
    // Ejemplo de sombra que podría funcionar para ambos:
    box-shadow: 0 0 8px rgba(0, 0, 0, 0.2);

    // Si necesitas asegurar legibilidad y getColor no lo hace completamente:
    .tramo-status, .tramo-time {
      // color: white !important; // Descomentar si es necesario para el contraste
    }
  }
}

.form-label {
  margin-bottom: 0.25rem;
  font-size: 0.9rem;
}

.form-select, .form-control {
  margin-bottom: 1rem;
}

// Estilos para el contenedor de los tramos horarios
.tramos-container {
  display: flex; // Habilita Flexbox
  flex-direction: row; // Asegura que la dirección principal sea horizontal
  flex-wrap: wrap; // Permite que los elementos pasen a la siguiente línea
  justify-content: flex-start; // Alinea las filas de tramos al inicio. Puedes usar 'center' si lo prefieres.
}

// Estilos para cada tramo horario individual (franja/rectángulo)
.tramo-slot {
  display: flex; // Para centrar el contenido fácilmente
  justify-content: center;
  align-items: center;
  width: 120px;  // Hacemos los tramos más anchos para que parezcan "franjas" o botones
  height: 45px; // Ajustamos la altura
  padding: 5px 10px; // Ajustamos el padding para el nuevo tamaño
  margin: 5px;
  cursor: pointer;
  border: 1px solid; // El color específico del borde se aplica dinámicamente desde la función getColor
  text-align: center;
  font-size: 0.9rem; // Aumentamos ligeramente el tamaño de la fuente para mejor legibilidad
  font-weight: 500;
  border-radius: 4px; // Esquinas redondeadas
  box-sizing: border-box; // Para que width/height incluyan padding y borde
  transition: transform 0.1s ease-in-out, box-shadow 0.1s ease-in-out; // Pequeña animación

  // Efecto hover para los tramos que son clicables
  &.clickable:hover {
    transform: scale(1.03); // Ajustamos el efecto hover
    box-shadow: 0 2px 5px rgba(0,0,0,0.12); // Sombra sutil
  }
}

// Estilos para el contenedor de los botones de acción
.acciones {
  margin-top: 20px;
}